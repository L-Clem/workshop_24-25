# Installer les d√©pendances n√©cessaires
# pip install pynput nltk torch transformers

from pynput import keyboard
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import time
import re
import tkinter as tk
from tkinter import messagebox
import threading

# Charger le mod√®le et le tokenizer
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")
model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased-finetuned-sst-2-english")

# Expressions indiquant un contexte humoristique ou familier
expressions_humoristiques = ["mdr", "ptdr", "lol", "xd", "üòÇ", "ü§£", "üòÖ", "üòÜ", "haha", "hihi"]

texte_capture = ""
score_total = 0
dernier_reset = time.time()
SEUIL_ALERTE = 0.7  # Seuil pour le sentiment n√©gatif
SEUIL_POPUP = 2.1  # Seuil pour d√©clencher le pop-up (3 * SEUIL_ALERTE)
DUREE_RESET = 300  # 5 minutes en secondes

# Fonction pour analyser le sentiment
def analyser_sentiment(texte):
    inputs = tokenizer(texte, return_tensors="pt", truncation=True, max_length=512)
    outputs = model(**inputs)
    probs = torch.nn.functional.softmax(outputs.logits, dim=-1)
    return probs.detach().numpy()[0]

def detecter_humour(texte):
    texte_lower = texte.lower()
    return any(re.search(r'\b' + re.escape(exp) + r'\b', texte_lower) for exp in expressions_humoristiques)

def afficher_popup():
    root = tk.Tk()
    root.withdraw()  # Cacher la fen√™tre principale
    messagebox.showwarning("Alerte", "Niveau de n√©gativit√© critique atteint !\nUne intervention peut √™tre n√©cessaire.")

def analyser_texte(texte):
    global score_total, dernier_reset
    
    contexte_humoristique = detecter_humour(texte)
    sentiment_scores = analyser_sentiment(texte)
    sentiment_negatif = sentiment_scores[0]  # Indice 0 pour le sentiment n√©gatif
    
    print(f"\nPhrase analys√©e : '{texte}'")
    print(f"Score de sentiment n√©gatif : {sentiment_negatif:.2f}")
    
    if contexte_humoristique:
        print("Contexte humoristique d√©tect√©, score ajust√©.")
        sentiment_negatif *= 0.5  # R√©duire le score n√©gatif de moiti√© si contexte humoristique
    
    if sentiment_negatif > SEUIL_ALERTE:
        temps_actuel = time.time()
        if temps_actuel - dernier_reset > DUREE_RESET:
            score_total = 0
            dernier_reset = temps_actuel
        
        score_total += sentiment_negatif
        print(f"Score total de n√©gativit√© : {score_total:.2f}")
        
        if score_total >= SEUIL_POPUP:
            print("\n!!! ALERTE : Niveau de n√©gativit√© critique atteint !!!")
            print("Une intervention peut √™tre n√©cessaire.")
            threading.Thread(target=afficher_popup).start()
        
        return True
    return False

def on_press(key):
    global texte_capture
    try:
        if key == keyboard.Key.enter:
            if analyser_texte(texte_capture):
                print("Attention : Ce message pourrait √™tre consid√©r√© comme n√©gatif ou offensant.")
            else:
                print(f"\nTexte analys√© (aucun contenu n√©gatif significatif d√©tect√©)")
            texte_capture = ""
        elif key == keyboard.Key.space:
            texte_capture += " "
        else:
            texte_capture += key.char
    except AttributeError:
        if key == keyboard.Key.backspace:
            texte_capture = texte_capture[:-1]

def on_release(key):
    if key == keyboard.Key.esc:
        return False

print("Surveillance du clavier en cours. Appuyez sur 'Entr√©e' pour analyser la phrase. 'Esc' pour quitter.")
with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()